!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=2)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(5),i=function(){function t(t){this.arr=new Float32Array(16),this.arr[0]=t[0],this.arr[4]=t[1],this.arr[8]=t[2],this.arr[12]=t[3],this.arr[1]=t[4],this.arr[5]=t[5],this.arr[9]=t[6],this.arr[13]=t[7],this.arr[2]=t[8],this.arr[6]=t[9],this.arr[10]=t[10],this.arr[14]=t[11],this.arr[3]=t[12],this.arr[7]=t[13],this.arr[11]=t[14],this.arr[15]=t[15]}return t.prototype.get=function(t){return this.arr[t]},t.prototype.getXY=function(t,e){return this.arr[4*t+e]},t.prototype.getBuffer=function(){return this.arr},t.prototype.set=function(t,e){this.arr[t]=e},t.prototype.setXY=function(t,e,r){this.arr[4*t+e]=r},t.prototype.add=function(t){for(var e=0;e<16;e++)this.set(e,this.get(e)+t.get(e));return this},t.prototype.multiply=function(t){return this},t.prototype.multiplyScalar=function(t){for(var e=0;e<16;e++)this.set(e,this.get(e)*t)},t.prototype.multiplyVector=function(t){for(var e=new n.Vector4(0,0,0,1),r=0;r<3;r++)e.setX(e.getX()+this.getXY(r,0)*t.get(r)),e.setY(e.getY()+this.getXY(r,1)*t.get(r)),e.setZ(e.getZ()+this.getXY(r,2)*t.get(r));return e},t.prototype.transpose=function(){var t=this.get(1);this.set(1,this.get(4)),this.set(4,t),t=this.get(2),this.set(2,this.get(8)),this.set(8,t),t=this.get(3),this.set(3,this.get(12)),this.set(12,t),t=this.get(6),this.set(6,this.get(9)),this.set(9,t),t=this.get(7),this.set(7,this.get(13)),this.set(13,t),t=this.get(11),this.set(11,this.get(14)),this.set(14,t)},t.identity=function(){return new t([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])},t.prototype.print=function(){console.log(this.arr[0]+" "+this.arr[4]+" "+this.arr[8]+" "+this.arr[12]),console.log(this.arr[1]+" "+this.arr[5]+" "+this.arr[9]+" "+this.arr[13]),console.log(this.arr[2]+" "+this.arr[6]+" "+this.arr[10]+" "+this.arr[14]),console.log(this.arr[3]+" "+this.arr[7]+" "+this.arr[11]+" "+this.arr[15])},t}();e.Matrix4=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){this.arr=new Array(0)}return t.prototype.push=function(t){this.contains(t.getId())||(this.arr=this.arr.concat([t]))},t.prototype.popByIdentifier=function(t){for(var e=0,r=this.arr.length;e<r;e++){var n=this.arr[e];if(0===n.getId().localeCompare(t))return this.removeByIndex(e),n}},t.prototype.popByIndex=function(t){if(t>=this.arr.length)return null;var e=this.arr[t];return this.removeByIndex(t),e},t.prototype.getByIdentifier=function(t){for(var e=0,r=this.arr.length;e<r;e++){var n=this.arr[e];if(0===n.getId().localeCompare(t))return n}return null},t.prototype.getByIndex=function(t){if(!(t>=this.arr.length))return this.arr[t]},t.prototype.removeByIdentifier=function(t){for(var e=0,r=this.arr.length;e<r;e++){if(0===this.arr[e].getId().localeCompare(t))return void this.arr.splice(e,1)}},t.prototype.removeByIndex=function(t){t>=this.arr.length||this.arr.splice(t,1)},t.prototype.length=function(){return this.arr.length},t.prototype.forEach=function(t){for(var e=0,r=this.arr.length;e<r;e++)t(this.arr[e],e)},t.prototype.contains=function(t){for(var e=0,r=this.arr.length;e<r;e++){if(0===this.arr[e].getId().localeCompare(t))return!0}return!1},t}();e.List=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(3),i=r(4),o=r(6),s=r(7),a=r(8),u=r(10),c=r(11);window.onload=function(){var t=r(12).default,e=r(13).default,f=document.getElementById("canvas").getContext("webgl2"),h=n.GLHelper.createShader(f,f.VERTEX_SHADER,t),p=n.GLHelper.createShader(f,f.FRAGMENT_SHADER,e),l=n.GLHelper.createProgram(f,h,p),d=u.Geometry.fromDesc(o.GeometryFactory.Cube()),g=new a.Object3D(d);g.setShaders(h,p),g.setProgram(l);var y=i.GLMatrix.Perspective(45*Math.PI/180,f.canvas.clientWidth/f.canvas.clientHeight,.1,500),m=new c.Scene(f);m.setMatrix(y),m.addObject(g);var v=new s.Renderer(f,m);v.init(),requestAnimationFrame(function(){v.render()})}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){}return t.createShader=function(t,e,r){var n=t.createShader(e);if(t.shaderSource(n,r),t.compileShader(n),t.getShaderParameter(n,t.COMPILE_STATUS))return n;console.log(t.getShaderInfoLog(n)),t.deleteShader(n)},t.createProgram=function(t,e,r){var n=t.createProgram();if(t.attachShader(n,e),t.attachShader(n,r),t.linkProgram(n),t.getProgramParameter(n,t.LINK_STATUS))return n;console.log(t.getProgramInfoLog(n)),t.deleteProgram(n)},t}();e.GLHelper=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(0),i=function(){function t(){}return t.Perspective=function(t,e,r,i){var o=r,s=i,a=o*Math.tan(Math.PI/180*.5*t),u=2*a,c=e*u,f=-.5*c,h=f+c,p=a-u,l=[2*o/(h-f),0,0,0,0,2*o/(a-p),0,0,(h+f)/(h-f),(a+p)/(a-p),-(s+o)/(s-o),-1,0,0,-2*s*o/(s-o),0];return new n.Matrix4(l)},t.Camera=function(){},t}();e.GLMatrix=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e,r,n){this.NUM_OF_ELEMENTS=4,this.arr=new Float32Array(4),this.arr[0]=t,this.arr[1]=e,this.arr[2]=r,this.arr[3]=n}return t.prototype.getX=function(){return this.arr[0]},t.prototype.getY=function(){return this.arr[1]},t.prototype.getZ=function(){return this.arr[2]},t.prototype.getW=function(){return this.arr[3]},t.prototype.get=function(t){return this.arr[t]},t.prototype.getBuffer=function(){return this.arr},t.prototype.setX=function(t){this.arr[0]=t},t.prototype.setY=function(t){this.arr[1]=t},t.prototype.setZ=function(t){this.arr[2]=t},t.prototype.setW=function(t){this.arr[3]=t},t.prototype.toArray=function(){return[this.arr[0],this.arr[1],this.arr[2],this.arr[3]]},t.prototype.add=function(t){this.arr[0]+=t.getX(),this.arr[1]+=t.getY(),this.arr[2]+=t.getZ()},t.prototype.multiplyScalar=function(t){this.arr[0]*=t,this.arr[1]*=t,this.arr[2]*=t},t.prototype.normalize=function(){for(var t=0,e=0;e<3;e++)t+=Math.pow(this.get(e),2);t=Math.sqrt(t),this.multiplyScalar(1/t)},t}();e.Vector4=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){}return t.Plane=function(){return{vertices:new Float32Array([-.5,-.5,.5,1,.5,-.5,.5,1,.5,.5,.5,1,-.5,.5,.5,1]),normales:new Float32Array([0,0,-1,1,0,0,-1,1,0,0,-1,1,0,0,-1,1]),indices:new Uint16Array([0,1,2,0,2,3])}},t.Cube=function(){return{vertices:new Float32Array([-.5,-.5,.5,1,.5,-.5,.5,1,.5,.5,.5,1,-.5,.5,.5,1,-.5,-.5,-.5,1,-.5,.5,-.5,1,.5,.5,-.5,1,.5,-.5,-.5,1,-.5,.5,-.5,1,-.5,.5,.5,1,.5,.5,.5,1,.5,.5,-.5,1,-.5,-.5,-.5,1,.5,-.5,-.5,1,.5,-.5,.5,1,-.5,-.5,.5,1,.5,-.5,-.5,1,.5,.5,-.5,1,.5,.5,.5,1,.5,-.5,.5,1,-.5,-.5,-.5,1,-.5,-.5,.5,1,-.5,.5,.5,1,-.5,.5,-.5,1]),normales:new Float32Array([0,0,-1,1,0,0,-1,1,0,0,-1,1,0,0,-1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,-1,0,0,1,-1,0,0,1,-1,0,0,1,-1,0,0,1]),indices:new Uint16Array([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23])}},t}();e.GeometryFactory=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){this.gl=t,this.scene=e}return t.prototype.init=function(){this.gl.clearColor(0,0,0,1)},t.prototype.render=function(){var t=this.gl;t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT),t.viewport(0,0,t.canvas.clientWidth,t.canvas.clientHeight),this.scene.draw()},t}();e.Renderer=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(0),i=r(9),o=r(1),s=function(){function t(t){this.id=i.UUID.create(),this.geometry=t,this.matrix=n.Matrix4.identity(),this.children=new o.List,this.parent=null,this.vertexShader=null,this.fragmentShader=null,this.program=null,this.attributeLocations=new Array,this.uniformLocations=new Array,this.bSetup=!1}return t.prototype.getId=function(){return this.id},t.prototype.getGeometry=function(){return this.geometry},t.prototype.setGeometry=function(t){this.geometry=t},t.prototype.getMatrix=function(){return this.matrix},t.prototype.setMatrix=function(t){this.matrix=t},t.prototype.getParent=function(){return this.parent},t.prototype.setParent=function(t){this.parent=t},t.prototype.getChildren=function(){return this.children},t.prototype.addChild=function(t){this.children.push(t)},t.prototype.removeChild=function(t){this.children.removeByIdentifier(t)},t.prototype.getShaders=function(){return{vertexShader:this.vertexShader,fragmentShader:this.fragmentShader}},t.prototype.setShaders=function(t,e){this.vertexShader=t,this.fragmentShader=e},t.prototype.getProgram=function(){return this.program},t.prototype.setProgram=function(t){this.program=t},t.prototype.getAttributeLocations=function(){return this.attributeLocations},t.prototype.getUniformLocations=function(){return this.uniformLocations},t.prototype.isSetup=function(){return this.bSetup},t.prototype.setup=function(t){this.bSetup||(this.attributeLocations.push(t.getAttribLocation(this.program,"vertex")),this.uniformLocations.push(t.getUniformLocation(this.program,"u_perspective")),this.uniformLocations.push(t.getUniformLocation(this.program,"u_modelview")),this.uniformLocations.push(t.getUniformLocation(this.program,"u_color")),this.geometry.createBuffers(t),this.bSetup=!0,this.children.forEach(function(e,r){e.setup(t)}))},t}();e.Object3D=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){}return t.create=function(){function t(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return t()+t()+"-"+t()+"-"+t()+"-"+t()+"-"+t()+t()+t()},t}();e.UUID=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){this.vertices=new Float32Array(0),this.colors=new Uint8Array(0),this.normales=new Float32Array(0),this.indices=new Uint16Array(0),this.buffers={vertexBuffer:null,colorBuffer:null,indexBuffer:null},this.buffersCreated=!1,this.elementCount=0}return t.prototype.getVertices=function(){return this.vertices},t.prototype.getNormales=function(){return this.normales},t.prototype.getIndices=function(){return this.indices},t.prototype.getBuffers=function(){return this.buffers},t.prototype.setVertices=function(t){this.vertices=t},t.prototype.setNormales=function(t){this.normales=t},t.prototype.setIndices=function(t){this.indices=t},t.prototype.setBuffers=function(t){this.buffers=t},t.prototype.getElementCount=function(){return this.elementCount},t.prototype.createBuffers=function(t){this.buffersCreated||(0!==this.vertices.length&&(this.buffers.vertexBuffer=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,this.buffers.vertexBuffer),t.bufferData(t.ARRAY_BUFFER,this.vertices,t.STATIC_DRAW),this.elementCount=this.vertices.length),0!==this.indices.length&&(this.buffers.indexBuffer=t.createBuffer(),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.buffers.indexBuffer),t.bufferData(t.ELEMENT_ARRAY_BUFFER,this.indices,t.STATIC_DRAW),this.elementCount=this.indices.length),this.buffersCreated=!0)},t.fromDesc=function(e){var r=new t;return r.setVertices(e.vertices),r.setNormales(e.normales),e.indices&&r.setIndices(e.indices),r},t}();e.Geometry=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(1),i=r(0),o=function(){function t(t){this.gl=t,this.objects=new n.List,this.matrix=i.Matrix4.identity()}return t.prototype.getMatrix=function(){return this.matrix},t.prototype.setMatrix=function(t){this.matrix=t},t.prototype.getObjects=function(){return this.objects},t.prototype.getObject=function(t){return this.objects.getByIdentifier(t)},t.prototype.addObject=function(t){this.objects.push(t)},t.prototype.draw=function(){var t=this;this.objects.forEach(function(e,r){var n=t.gl;e.setup(n);var i=e.getGeometry();i.createBuffers(n);var o=i.getBuffers(),s=i.getElementCount(),a=e.getAttributeLocations(),u=e.getUniformLocations();n.bindBuffer(n.ARRAY_BUFFER,o.vertexBuffer),n.vertexAttribPointer(a[0],4,n.FLOAT,!1,0,0),n.enableVertexAttribArray(a[0]),n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,o.indexBuffer),n.useProgram(e.getProgram()),n.uniformMatrix4fv(u[0],!1,t.getMatrix().getBuffer()),n.uniformMatrix4fv(u[1],!1,e.getMatrix().getBuffer()),n.uniform4fv(u[2],new Float32Array([1,0,0,1])),n.drawElements(n.TRIANGLES,s,n.UNSIGNED_SHORT,0),n.bindBuffer(n.ARRAY_BUFFER,null),n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,null)})},t}();e.Scene=o},function(t,e,r){"use strict";r.r(e),e.default="#version 300 es\r\n\r\nin vec4 vertex;\r\nuniform mat4 u_perspective;\r\nuniform mat4 u_modelview;\r\n\r\nvoid main() {\r\n    gl_Position = u_perspective * vertex;\r\n}"},function(t,e,r){"use strict";r.r(e),e.default="#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform vec4 u_color;\r\nout vec4 outColor;\r\n\r\nvoid main(){\r\n    outColor = u_color;\r\n}"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,