!function(t){var r={};function e(o){if(r[o])return r[o].exports;var n=r[o]={i:o,l:!1,exports:{}};return t[o].call(n.exports,n,n.exports,e),n.l=!0,n.exports}e.m=t,e.c=r,e.d=function(t,r,o){e.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:o})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,r){if(1&r&&(t=e(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var n in t)e.d(o,n,function(r){return t[r]}.bind(null,n));return o},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},e.p="",e(e.s=3)}([function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var o=e(1),n=function(){function t(t){this.arr=new Float32Array(16),this.arr[0]=t[0],this.arr[4]=t[1],this.arr[8]=t[2],this.arr[12]=t[3],this.arr[1]=t[4],this.arr[5]=t[5],this.arr[9]=t[6],this.arr[13]=t[7],this.arr[2]=t[8],this.arr[6]=t[9],this.arr[10]=t[10],this.arr[14]=t[11],this.arr[3]=t[12],this.arr[7]=t[13],this.arr[11]=t[14],this.arr[15]=t[15]}return t.prototype.get=function(t){return this.arr[t]},t.prototype.getXY=function(t,r){return this.arr[4*t+r]},t.prototype.getBuffer=function(){return this.arr},t.prototype.getRow=function(t){for(var r=new o.Vector4(0,0,0,0),e=0,n=0+t;n<16;n+=4)r.set(e,this.get(n)),e++;return r},t.prototype.getColumn=function(t){for(var r=new o.Vector4(0,0,0,0),e=0+4*t,n=e+4,i=0;e<n;e++)r.set(i,this.get(e)),i++;return r},t.prototype.set=function(t,r){this.arr[t]=r},t.prototype.setXY=function(t,r,e){this.arr[4*t+r]=e},t.prototype.add=function(r){for(var e=t.identity(),o=0;o<16;o++)e.set(o,this.get(o)+r.get(o));return e},t.prototype.multiply=function(r){for(var e=t.identity(),o=0;o<4;o++)for(var n=0;n<4;n++){for(var i=0,s=this.getRow(n),a=r.getColumn(o),u=0;u<4;u++)i+=s.get(u)*a.get(u);e.setXY(o,n,i)}return e},t.prototype.multiplyScalar=function(r){for(var e=t.identity(),o=0;o<16;o++)e.set(o,this.get(o)*r);return e},t.prototype.multiplyVector=function(t){for(var r=new o.Vector4(0,0,0,1),e=0;e<3;e++)r.setX(r.getX()+this.getXY(e,0)*t.get(e)),r.setY(r.getY()+this.getXY(e,1)*t.get(e)),r.setZ(r.getZ()+this.getXY(e,2)*t.get(e));return r},t.prototype.transpose=function(){var t=this.get(1);this.set(1,this.get(4)),this.set(4,t),t=this.get(2),this.set(2,this.get(8)),this.set(8,t),t=this.get(3),this.set(3,this.get(12)),this.set(12,t),t=this.get(6),this.set(6,this.get(9)),this.set(9,t),t=this.get(7),this.set(7,this.get(13)),this.set(13,t),t=this.get(11),this.set(11,this.get(14)),this.set(14,t)},t.identity=function(){return new t([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])},t.prototype.print=function(){console.log(this.arr[0]+" "+this.arr[4]+" "+this.arr[8]+" "+this.arr[12]),console.log(this.arr[1]+" "+this.arr[5]+" "+this.arr[9]+" "+this.arr[13]),console.log(this.arr[2]+" "+this.arr[6]+" "+this.arr[10]+" "+this.arr[14]),console.log(this.arr[3]+" "+this.arr[7]+" "+this.arr[11]+" "+this.arr[15])},t}();r.Matrix4=n},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var o=function(){function t(t,r,e,o){this.NUM_OF_ELEMENTS=4,this.arr=new Float32Array(4),this.arr[0]=t,this.arr[1]=r,this.arr[2]=e,this.arr[3]=o}return t.prototype.getX=function(){return this.arr[0]},t.prototype.getY=function(){return this.arr[1]},t.prototype.getZ=function(){return this.arr[2]},t.prototype.getW=function(){return this.arr[3]},t.prototype.get=function(t){return this.arr[t]},t.prototype.getBuffer=function(){return this.arr},t.prototype.setX=function(t){this.arr[0]=t},t.prototype.setY=function(t){this.arr[1]=t},t.prototype.setZ=function(t){this.arr[2]=t},t.prototype.setW=function(t){this.arr[3]=t},t.prototype.set=function(t,r){this.arr[t]=r},t.prototype.toArray=function(){return[this.arr[0],this.arr[1],this.arr[2],this.arr[3]]},t.prototype.add=function(r){var e=new t(0,0,0,1);return e.set(0,this.arr[0]+r.getX()),e.set(1,this.arr[1]+r.getY()),e.set(2,this.arr[2]+r.getZ()),e},t.prototype.substract=function(r){var e=new t(0,0,0,1);return e.set(1,this.arr[0]-r.getX()),e.set(2,this.arr[1]-r.getY()),e.set(3,this.arr[2]-r.getZ()),e},t.prototype.multiplyScalar=function(r){var e=new t(0,0,0,this.getW());return e.set(0,this.arr[0]*r),e.set(1,this.arr[1]*r),e.set(2,this.arr[2]*r),e},t.prototype.dotProduct=function(t){for(var r=0,e=0;e<3;e++)r+=this.get(e)*t.get(e);return r},t.prototype.crossProduct=function(r){var e=new t(0,0,0,1);return e.set(0,this.arr[1]*r.getZ()-this.arr[2]*r.getY()),e.set(1,this.arr[2]*r.getX()-this.arr[0]*r.getZ()),e.set(2,this.arr[3]*r.getY()-this.arr[1]*r.getX()),e},t.prototype.normalize=function(){for(var t=0,r=0;r<3;r++)t+=Math.pow(this.get(r),2);return t=Math.sqrt(t),this.multiplyScalar(1/t)},t.prototype.print=function(){console.log(this.getX()+" "+this.getY()+" "+this.getZ()+" "+this.getW())},t}();r.Vector4=o},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var o=function(){function t(){this.arr=new Array(0)}return t.prototype.push=function(t){this.contains(t.getId())||(this.arr=this.arr.concat([t]))},t.prototype.popByIdentifier=function(t){for(var r=0,e=this.arr.length;r<e;r++){var o=this.arr[r];if(0===o.getId().localeCompare(t))return this.removeByIndex(r),o}},t.prototype.popByIndex=function(t){if(t>=this.arr.length)return null;var r=this.arr[t];return this.removeByIndex(t),r},t.prototype.getByIdentifier=function(t){for(var r=0,e=this.arr.length;r<e;r++){var o=this.arr[r];if(0===o.getId().localeCompare(t))return o}return null},t.prototype.getByIndex=function(t){if(!(t>=this.arr.length))return this.arr[t]},t.prototype.removeByIdentifier=function(t){for(var r=0,e=this.arr.length;r<e;r++){if(0===this.arr[r].getId().localeCompare(t))return void this.arr.splice(r,1)}},t.prototype.removeByIndex=function(t){t>=this.arr.length||this.arr.splice(t,1)},t.prototype.length=function(){return this.arr.length},t.prototype.forEach=function(t){for(var r=0,e=this.arr.length;r<e;r++)t(this.arr[r],r)},t.prototype.contains=function(t){for(var r=0,e=this.arr.length;r<e;r++){if(0===this.arr[r].getId().localeCompare(t))return!0}return!1},t}();r.List=o},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var o=e(4),n=e(5),i=e(6),s=e(7),a=e(9),u=e(1),c=e(10);new u.Vector4(0,10,0,1);window.onload=function(){var t=e(12).default,r=e(13).default,g=document.getElementById("canvas").getContext("webgl2"),l=o.GLHelper.createShader(g,g.VERTEX_SHADER,t),y=o.GLHelper.createShader(g,g.FRAGMENT_SHADER,r),d=o.GLHelper.createProgram(g,l,y),v=new c.CubeGeometry,m=new s.Object3D(v,g,d),_=n.GLMatrix.View(new u.Vector4(4,3,3,1),new u.Vector4(0,1,0,1),new u.Vector4(0,0,0,1)),b=new a.Scene;b.setMatrix(_),b.addObject(m);var w=n.GLMatrix.Perspective(45,g.canvas.clientWidth/g.canvas.clientHeight,.1,500),x=new i.Renderer(g,b);x.setMatrix(w),requestAnimationFrame(function t(){var r=n.GLMatrix.View(new u.Vector4(h,f,p,1),new u.Vector4(0,1,0,1),new u.Vector4(0,0,0,1));b.setMatrix(r),x.render(),requestAnimationFrame(t)})};var h=0,f=10,p=0;window.onkeypress=function(t){switch(t.key){case"w":h+=.1;break;case"s":h-=.1;break;case"a":p-=.1;break;case"d":p+=.1;break;case"r":case"t":f+=.1}}},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var o=function(){function t(){}return t.createShader=function(t,r,e){var o=t.createShader(r);if(t.shaderSource(o,e),t.compileShader(o),t.getShaderParameter(o,t.COMPILE_STATUS))return o;console.log(t.getShaderInfoLog(o)),t.deleteShader(o)},t.createProgram=function(t,r,e){var o=t.createProgram();if(t.attachShader(o,r),t.attachShader(o,e),t.linkProgram(o),t.getProgramParameter(o,t.LINK_STATUS))return o;console.log(t.getProgramInfoLog(o)),t.deleteProgram(o)},t}();r.GLHelper=o},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var o=e(0),n=function(){function t(){}return t.Perspective=function(t,r,e,n){var i=e,s=n,a=i*Math.tan(Math.PI/180*.5*t),u=2*a,c=r*u,h=-.5*c,f=h+c,p=a-u,g=[2*i/(f-h),0,(f+h)/(f-h),0,0,2*i/(a-p),(a+p)/(a-p),0,0,0,-(s+i)/(s-i),-2*s*i/(s-i),0,0,-1,0];return new o.Matrix4(g)},t.Perspective2=function(){},t.View=function(t,r,e){var n=t.substract(e).normalize(),i=r.crossProduct(n).normalize(),s=n.crossProduct(i);i.setW(-i.dotProduct(t)),s.setW(-s.dotProduct(t)),n.setW(-n.dotProduct(t));var a=[i.getX(),s.getX(),n.getX(),0,i.getY(),s.getY(),n.getY(),0,i.getZ(),s.getZ(),n.getZ(),0,i.getW(),s.getW(),n.getW(),1];return new o.Matrix4(a)},t.View2=function(t,r,e){var n=t.substract(e).normalize(),i=r.crossProduct(n).normalize(),s=n.crossProduct(i).normalize(),a=i.crossProduct(s),u=[i.getX(),s.getX(),a.getX(),0,i.getY(),s.getY(),a.getY(),0,i.getZ(),s.getZ(),a.getZ(),0,i.getW(),s.getW(),a.getW(),1];return new o.Matrix4(u)},t}();r.GLMatrix=n},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var o=e(0),n=function(){function t(t,r){this.gl=t,this.scene=r,this.matrix=o.Matrix4.identity(),this.init()}return t.prototype.getMatrix=function(){return this.matrix},t.prototype.setMatrix=function(t){this.matrix=t},t.prototype.init=function(){var t=this.gl;t.clearColor(0,0,0,1),t.viewport(0,0,t.canvas.clientWidth,t.canvas.clientHeight)},t.prototype.render=function(){var t=this,r=this.gl;r.clear(r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT),this.scene.getObjects().forEach(function(e,o){r.useProgram(e.getProgram()),r.bindVertexArray(e.getVAO());var n=e.getUniformLocations();r.uniformMatrix4fv(n[0],!1,t.matrix.getBuffer()),r.uniformMatrix4fv(n[1],!1,t.scene.getMatrix().getBuffer()),r.uniformMatrix4fv(n[2],!1,e.getMatrix().getBuffer()),r.uniform4fv(n[3],new Float32Array([1,0,0,1])),r.drawElements(r.TRIANGLES,36,r.UNSIGNED_SHORT,0)})},t}();r.Renderer=n},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var o=e(0),n=e(8),i=e(2),s=function(){function t(t,r,e){this.id=n.UUID.create(),this.matrix=o.Matrix4.identity(),this.geometry=t,this.program=e,this.vao=null,this.vbo=new Array(0),this.attributeLocations=new Array(0),this.uniformLocations=new Array(0),this.children=new i.List,this.parent=null,this.setup(r)}return t.prototype.getId=function(){return this.id},t.prototype.getGeometry=function(){return this.geometry},t.prototype.getMatrix=function(){return this.matrix},t.prototype.getProgram=function(){return this.program},t.prototype.getVAO=function(){return this.vao},t.prototype.getVBOs=function(){return this.vbo},t.prototype.getUniformLocations=function(){return this.uniformLocations},t.prototype.setGeometry=function(t){this.geometry=t},t.prototype.setMatrix=function(t){this.matrix=t},t.prototype.getParent=function(){return this.parent},t.prototype.setParent=function(t){this.parent=t},t.prototype.getChildren=function(){return this.children},t.prototype.addChild=function(t){this.children.push(t)},t.prototype.removeChild=function(t){this.children.removeByIdentifier(t)},t.prototype.setup=function(t){this.attributeLocations.push(t.getAttribLocation(this.program,"a_position")),this.uniformLocations.push(t.getUniformLocation(this.program,"u_perspective")),this.uniformLocations.push(t.getUniformLocation(this.program,"u_view")),this.uniformLocations.push(t.getUniformLocation(this.program,"u_model")),this.uniformLocations.push(t.getUniformLocation(this.program,"u_color")),this.vao=t.createVertexArray(),t.bindVertexArray(this.vao),this.vbo.push(t.createBuffer()),t.bindBuffer(t.ARRAY_BUFFER,this.vbo[0]),t.bufferData(t.ARRAY_BUFFER,this.geometry.getVertices(),t.STATIC_DRAW),t.enableVertexAttribArray(this.attributeLocations[0]),t.vertexAttribPointer(this.attributeLocations[0],4,t.FLOAT,!1,0,0),this.vbo.push(t.createBuffer()),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.vbo[1]),t.bufferData(t.ELEMENT_ARRAY_BUFFER,this.geometry.getIndices(),t.STATIC_DRAW),t.bindVertexArray(null)},t}();r.Object3D=s},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var o=function(){function t(){}return t.create=function(){function t(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return t()+t()+"-"+t()+"-"+t()+"-"+t()+"-"+t()+t()+t()},t}();r.UUID=o},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var o=e(2),n=e(0),i=function(){function t(){this.objects=new o.List,this.matrix=n.Matrix4.identity()}return t.prototype.getObjects=function(){return this.objects},t.prototype.getObject=function(t){return this.objects.getByIdentifier(t)},t.prototype.addObject=function(t){this.objects.push(t)},t.prototype.getMatrix=function(){return this.matrix},t.prototype.setMatrix=function(t){this.matrix=t},t}();r.Scene=i},function(t,r,e){"use strict";var o,n=this&&this.__extends||(o=function(t,r){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)r.hasOwnProperty(e)&&(t[e]=r[e])})(t,r)},function(t,r){function e(){this.constructor=t}o(t,r),t.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)});Object.defineProperty(r,"__esModule",{value:!0});var i=function(t){function r(){var r=t.call(this)||this;return r.setVertices(new Float32Array([-.5,-.5,.5,1,.5,-.5,.5,1,.5,.5,.5,1,-.5,.5,.5,1,-.5,-.5,-.5,1,-.5,.5,-.5,1,.5,.5,-.5,1,.5,-.5,-.5,1,-.5,.5,-.5,1,-.5,.5,.5,1,.5,.5,.5,1,.5,.5,-.5,1,-.5,-.5,-.5,1,.5,-.5,-.5,1,.5,-.5,.5,1,-.5,-.5,.5,1,.5,-.5,-.5,1,.5,.5,-.5,1,.5,.5,.5,1,.5,-.5,.5,1,-.5,-.5,-.5,1,-.5,-.5,.5,1,-.5,.5,.5,1,-.5,.5,-.5,1])),r.setNormales(new Float32Array([0,0,-1,1,0,0,-1,1,0,0,-1,1,0,0,-1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,-1,0,0,1,-1,0,0,1,-1,0,0,1,-1,0,0,1])),r.setIndices(new Uint16Array([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23])),r}return n(r,t),r}(e(11).Geometry);r.CubeGeometry=i},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var o=function(){function t(){this.vertices=new Float32Array(0),this.texCoords=new Float32Array(0),this.colors=new Uint8Array(0),this.normales=new Float32Array(0),this.indices=new Uint16Array(0),this.buffers=new Array,this.vao=null}return t.prototype.getVertices=function(){return this.vertices},t.prototype.getTexCoords=function(){return this.texCoords},t.prototype.getNormales=function(){return this.normales},t.prototype.getIndices=function(){return this.indices},t.prototype.getVAO=function(){return this.vao},t.prototype.setVertices=function(t){this.vertices=t},t.prototype.setTexCoords=function(t){this.texCoords=t},t.prototype.setNormales=function(t){this.normales=t},t.prototype.setIndices=function(t){this.indices=t},t}();r.Geometry=o},function(t,r,e){"use strict";e.r(r),r.default="#version 300 es\r\n\r\nin vec4 a_position;\r\nuniform mat4 u_perspective;\r\nuniform mat4 u_view;\r\nuniform mat4 u_model;\r\n\r\nvoid main() {\r\n    gl_Position = u_perspective * u_view * u_model * a_position;\r\n}"},function(t,r,e){"use strict";e.r(r),r.default="#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform vec4 u_color;\r\nout vec4 outColor;\r\n\r\nvoid main(){\r\n    outColor = u_color;\r\n}"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,