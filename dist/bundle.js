!function(t){var r={};function e(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=r,e.d=function(t,r,n){e.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:n})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,r){if(1&r&&(t=e(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var o in t)e.d(n,o,function(r){return t[r]}.bind(null,o));return n},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},e.p="",e(e.s=3)}([function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=e(1),o=function(){function t(t){this.arr=new Float32Array(16),this.arr[0]=t[0],this.arr[4]=t[1],this.arr[8]=t[2],this.arr[12]=t[3],this.arr[1]=t[4],this.arr[5]=t[5],this.arr[9]=t[6],this.arr[13]=t[7],this.arr[2]=t[8],this.arr[6]=t[9],this.arr[10]=t[10],this.arr[14]=t[11],this.arr[3]=t[12],this.arr[7]=t[13],this.arr[11]=t[14],this.arr[15]=t[15]}return t.prototype.get=function(t){return this.arr[t]},t.prototype.getXY=function(t,r){return this.arr[4*t+r]},t.prototype.getBuffer=function(){return this.arr},t.prototype.getRow=function(t){for(var r=new n.Vector4(0,0,0,0),e=0,o=0+t;o<16;o+=4)r.set(e,this.get(o)),e++;return r},t.prototype.getColumn=function(t){for(var r=new n.Vector4(0,0,0,0),e=0+4*t,o=e+4,i=0;e<o;e++)r.set(i,this.get(e)),i++;return r},t.prototype.set=function(t,r){this.arr[t]=r},t.prototype.setXY=function(t,r,e){this.arr[4*t+r]=e},t.prototype.add=function(r){for(var e=t.identity(),n=0;n<16;n++)e.set(n,this.get(n)+r.get(n));return e},t.prototype.multiply=function(r){for(var e=t.identity(),n=0;n<4;n++)for(var o=0;o<4;o++){for(var i=0,s=this.getRow(o),a=r.getColumn(n),u=0;u<4;u++)i+=s.get(u)*a.get(u);e.setXY(n,o,i)}return e},t.prototype.multiplyScalar=function(r){for(var e=t.identity(),n=0;n<16;n++)e.set(n,this.get(n)*r);return e},t.prototype.multiplyVector=function(t){for(var r=new n.Vector4(0,0,0,1),e=0;e<3;e++)r.setX(r.getX()+this.getXY(e,0)*t.get(e)),r.setY(r.getY()+this.getXY(e,1)*t.get(e)),r.setZ(r.getZ()+this.getXY(e,2)*t.get(e));return r},t.prototype.transpose=function(){var t=this.get(1);this.set(1,this.get(4)),this.set(4,t),t=this.get(2),this.set(2,this.get(8)),this.set(8,t),t=this.get(3),this.set(3,this.get(12)),this.set(12,t),t=this.get(6),this.set(6,this.get(9)),this.set(9,t),t=this.get(7),this.set(7,this.get(13)),this.set(13,t),t=this.get(11),this.set(11,this.get(14)),this.set(14,t)},t.identity=function(){return new t([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])},t.prototype.print=function(){console.log(this.arr[0]+" "+this.arr[4]+" "+this.arr[8]+" "+this.arr[12]),console.log(this.arr[1]+" "+this.arr[5]+" "+this.arr[9]+" "+this.arr[13]),console.log(this.arr[2]+" "+this.arr[6]+" "+this.arr[10]+" "+this.arr[14]),console.log(this.arr[3]+" "+this.arr[7]+" "+this.arr[11]+" "+this.arr[15])},t}();r.Matrix4=o},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=function(){function t(t,r,e,n){this.NUM_OF_ELEMENTS=4,this.arr=new Float32Array(4),this.arr[0]=t,this.arr[1]=r,this.arr[2]=e,this.arr[3]=n}return t.prototype.getX=function(){return this.arr[0]},t.prototype.getY=function(){return this.arr[1]},t.prototype.getZ=function(){return this.arr[2]},t.prototype.getW=function(){return this.arr[3]},t.prototype.get=function(t){return this.arr[t]},t.prototype.getBuffer=function(){return this.arr},t.prototype.setX=function(t){this.arr[0]=t},t.prototype.setY=function(t){this.arr[1]=t},t.prototype.setZ=function(t){this.arr[2]=t},t.prototype.setW=function(t){this.arr[3]=t},t.prototype.set=function(t,r){this.arr[t]=r},t.prototype.toArray=function(){return[this.arr[0],this.arr[1],this.arr[2],this.arr[3]]},t.prototype.add=function(r){var e=new t(0,0,0,1);return e.set(0,this.arr[0]+r.getX()),e.set(1,this.arr[1]+r.getY()),e.set(2,this.arr[2]+r.getZ()),e},t.prototype.substract=function(r){var e=new t(0,0,0,1);return e.set(1,this.arr[0]-r.getX()),e.set(2,this.arr[1]-r.getX()),e.set(3,this.arr[2]-r.getZ()),e},t.prototype.multiplyScalar=function(r){var e=new t(0,0,0,this.getW());return e.set(0,this.arr[0]*r),e.set(1,this.arr[1]*r),e.set(2,this.arr[2]*r),e},t.prototype.dotProduct=function(t){for(var r=0,e=0;e<4;e++)r+=this.get(e)*t.get(e);return r},t.prototype.crossProduct=function(r){var e=new t(0,0,0,1);return e.set(0,this.arr[1]*r.getZ()-this.arr[2]*r.getY()),e.set(1,this.arr[2]*r.getX()-this.arr[0]*r.getZ()),e.set(2,this.arr[3]*r.getY()-this.arr[1]*r.getX()),e},t.prototype.normalize=function(){for(var t=0,r=0;r<3;r++)t+=Math.pow(this.get(r),2);return t=Math.sqrt(t),this.multiplyScalar(1/t)},t.prototype.print=function(){console.log(this.getX()+" "+this.getY()+" "+this.getZ()+" "+this.getW())},t}();r.Vector4=n},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=function(){function t(){this.arr=new Array(0)}return t.prototype.push=function(t){this.contains(t.getId())||(this.arr=this.arr.concat([t]))},t.prototype.popByIdentifier=function(t){for(var r=0,e=this.arr.length;r<e;r++){var n=this.arr[r];if(0===n.getId().localeCompare(t))return this.removeByIndex(r),n}},t.prototype.popByIndex=function(t){if(t>=this.arr.length)return null;var r=this.arr[t];return this.removeByIndex(t),r},t.prototype.getByIdentifier=function(t){for(var r=0,e=this.arr.length;r<e;r++){var n=this.arr[r];if(0===n.getId().localeCompare(t))return n}return null},t.prototype.getByIndex=function(t){if(!(t>=this.arr.length))return this.arr[t]},t.prototype.removeByIdentifier=function(t){for(var r=0,e=this.arr.length;r<e;r++){if(0===this.arr[r].getId().localeCompare(t))return void this.arr.splice(r,1)}},t.prototype.removeByIndex=function(t){t>=this.arr.length||this.arr.splice(t,1)},t.prototype.length=function(){return this.arr.length},t.prototype.forEach=function(t){for(var r=0,e=this.arr.length;r<e;r++)t(this.arr[r],r)},t.prototype.contains=function(t){for(var r=0,e=this.arr.length;r<e;r++){if(0===this.arr[r].getId().localeCompare(t))return!0}return!1},t}();r.List=n},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=e(4),o=e(5),i=e(6),s=e(7),a=e(9),u=e(10),c=e(1),h=e(11);window.onload=function(){var t=e(13).default,r=e(14).default,f=document.getElementById("canvas").getContext("webgl2"),p=n.GLHelper.createShader(f,f.VERTEX_SHADER,t),l=n.GLHelper.createShader(f,f.FRAGMENT_SHADER,r),g=n.GLHelper.createProgram(f,p,l),y=new h.CubeGeometry,d=new s.Object3D(y,f,g);d.setMatrix(u.Transform.Scale(new c.Vector4(.5,.5,.5,1)));var v=o.GLMatrix.View(new c.Vector4(0,10,1,1),new c.Vector4(0,1,0,1),new c.Vector4(0,0,0,1)),m=new a.Scene(v);m.addObject(d);var _=o.GLMatrix.Perspective(45,f.canvas.clientWidth/f.canvas.clientHeight,.1,500),b=new i.Renderer(f,m);b.setMatrix(_),requestAnimationFrame(function(){b.render()})}},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=function(){function t(){}return t.createShader=function(t,r,e){var n=t.createShader(r);if(t.shaderSource(n,e),t.compileShader(n),t.getShaderParameter(n,t.COMPILE_STATUS))return n;console.log(t.getShaderInfoLog(n)),t.deleteShader(n)},t.createProgram=function(t,r,e){var n=t.createProgram();if(t.attachShader(n,r),t.attachShader(n,e),t.linkProgram(n),t.getProgramParameter(n,t.LINK_STATUS))return n;console.log(t.getProgramInfoLog(n)),t.deleteProgram(n)},t}();r.GLHelper=n},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=e(0),o=function(){function t(){}return t.Perspective=function(t,r,e,o){var i=e,s=o,a=i*Math.tan(Math.PI/180*.5*t),u=2*a,c=r*u,h=-.5*c,f=h+c,p=a-u,l=[2*i/(f-h),0,(f+h)/(f-h),0,0,2*i/(a-p),(a+p)/(a-p),0,0,0,-(s+i)/(s-i),-2*s*i/(s-i),0,0,-1,0];return new n.Matrix4(l)},t.View=function(t,r,e){var o=t.substract(e).normalize(),i=r.crossProduct(o).normalize(),s=o.crossProduct(i);i.setW(-i.dotProduct(t)),s.setW(-s.dotProduct(t)),o.setW(-o.dotProduct(t));var a=i.toArray().concat(s.toArray().concat(o.toArray().concat([0,0,0,1])));return new n.Matrix4(a)},t}();r.GLMatrix=o},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=e(0),o=function(){function t(t,r){this.gl=t,this.scene=r,this.matrix=n.Matrix4.identity(),this.init()}return t.prototype.getMatrix=function(){return this.matrix},t.prototype.setMatrix=function(t){this.matrix=t},t.prototype.init=function(){var t=this.gl;t.clearColor(0,0,0,1),t.viewport(0,0,t.canvas.clientWidth,t.canvas.clientHeight)},t.prototype.render=function(){var t=this,r=this.gl;r.clear(r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT),this.scene.getObjects().forEach(function(e,n){r.useProgram(e.getProgram()),r.bindVertexArray(e.getVAO());var o=e.getUniformLocations();r.uniformMatrix4fv(o[0],!1,t.matrix.getBuffer()),r.uniformMatrix4fv(o[1],!1,t.scene.getMatrix().getBuffer()),r.uniformMatrix4fv(o[2],!1,e.getMatrix().getBuffer()),r.drawElements(r.TRIANGLES,36,r.UNSIGNED_SHORT,0)})},t}();r.Renderer=o},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=e(0),o=e(8),i=e(2),s=function(){function t(t,r,e){this.id=o.UUID.create(),this.matrix=n.Matrix4.identity(),this.geometry=t,this.program=e,this.vao=null,this.vbo=new Array(0),this.attributeLocations=new Array(0),this.uniformLocations=new Array(0),this.children=new i.List,this.parent=null,this.setup(r)}return t.prototype.getId=function(){return this.id},t.prototype.getGeometry=function(){return this.geometry},t.prototype.getMatrix=function(){return this.matrix},t.prototype.getProgram=function(){return this.program},t.prototype.getVAO=function(){return this.vao},t.prototype.getUniformLocations=function(){return this.uniformLocations},t.prototype.setGeometry=function(t){this.geometry=t},t.prototype.setMatrix=function(t){this.matrix=t},t.prototype.getParent=function(){return this.parent},t.prototype.setParent=function(t){this.parent=t},t.prototype.getChildren=function(){return this.children},t.prototype.addChild=function(t){this.children.push(t)},t.prototype.removeChild=function(t){this.children.removeByIdentifier(t)},t.prototype.setup=function(t){this.vao=t.createVertexArray(),t.bindVertexArray(this.vao),this.attributeLocations.push(t.getAttribLocation(this.program,"vertex")),this.attributeLocations.push(t.getAttribLocation(this.program,"u_color")),this.uniformLocations.push(t.getUniformLocation(this.program,"u_perspective")),this.uniformLocations.push(t.getUniformLocation(this.program,"u_view")),this.uniformLocations.push(t.getUniformLocation(this.program,"u_model")),this.vbo.push(t.createBuffer()),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.vbo[0]),t.bufferData(t.ELEMENT_ARRAY_BUFFER,this.geometry.getVertices(),t.STATIC_DRAW),t.vertexAttribPointer(this.attributeLocations[0],4,t.FLOAT,!1,0,0),t.enableVertexAttribArray(this.attributeLocations[0]),this.vbo.push(t.createBuffer()),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.vbo[1]),t.bufferData(t.ELEMENT_ARRAY_BUFFER,this.geometry.getIndices(),t.STATIC_DRAW),t.bindVertexArray(null)},t}();r.Object3D=s},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=function(){function t(){}return t.create=function(){function t(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return t()+t()+"-"+t()+"-"+t()+"-"+t()+"-"+t()+t()+t()},t}();r.UUID=n},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=e(2),o=function(){function t(t){this.objects=new n.List,this.matrix=t}return t.prototype.getObjects=function(){return this.objects},t.prototype.getObject=function(t){return this.objects.getByIdentifier(t)},t.prototype.addObject=function(t){this.objects.push(t)},t.prototype.getMatrix=function(){return this.matrix},t}();r.Scene=o},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=e(0),o=function(){function t(){}return t.Translate=function(t){var r=[1,0,0,t.getX(),0,1,0,t.getY(),0,0,1,t.getZ(),0,0,0,1];return new n.Matrix4(r)},t.Rotate=function(t,r){},t.Scale=function(t){var r=[t.getX(),0,0,0,0,t.getY(),0,0,0,0,t.getZ(),0,0,0,0,1];return new n.Matrix4(r)},t.build=function(t,r,e){return t.multiply(r.multiply(e))},t}();r.Transform=o},function(t,r,e){"use strict";var n,o=this&&this.__extends||(n=function(t,r){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)r.hasOwnProperty(e)&&(t[e]=r[e])})(t,r)},function(t,r){function e(){this.constructor=t}n(t,r),t.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)});Object.defineProperty(r,"__esModule",{value:!0});var i=function(t){function r(){var r=t.call(this)||this;return r.setVertices(new Float32Array([-.5,-.5,.5,1,.5,-.5,.5,1,.5,.5,.5,1,-.5,.5,.5,1,-.5,-.5,-.5,1,-.5,.5,-.5,1,.5,.5,-.5,1,.5,-.5,-.5,1,-.5,.5,-.5,1,-.5,.5,.5,1,.5,.5,.5,1,.5,.5,-.5,1,-.5,-.5,-.5,1,.5,-.5,-.5,1,.5,-.5,.5,1,-.5,-.5,.5,1,.5,-.5,-.5,1,.5,.5,-.5,1,.5,.5,.5,1,.5,-.5,.5,1,-.5,-.5,-.5,1,-.5,-.5,.5,1,-.5,.5,.5,1,-.5,.5,-.5,1])),r.setNormales(new Float32Array([0,0,-1,1,0,0,-1,1,0,0,-1,1,0,0,-1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,-1,0,0,1,-1,0,0,1,-1,0,0,1,-1,0,0,1])),r.setIndices(new Uint16Array([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23])),r}return o(r,t),r}(e(12).Geometry);r.CubeGeometry=i},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=function(){function t(){this.vertices=new Float32Array(0),this.texCoords=new Float32Array(0),this.colors=new Uint8Array(0),this.normales=new Float32Array(0),this.indices=new Uint16Array(0),this.buffers=new Array,this.vao=null}return t.prototype.getVertices=function(){return this.vertices},t.prototype.getTexCoords=function(){return this.texCoords},t.prototype.getNormales=function(){return this.normales},t.prototype.getIndices=function(){return this.indices},t.prototype.getVAO=function(){return this.vao},t.prototype.setVertices=function(t){this.vertices=t},t.prototype.setTexCoords=function(t){this.texCoords=t},t.prototype.setNormales=function(t){this.normales=t},t.prototype.setIndices=function(t){this.indices=t},t}();r.Geometry=n},function(t,r,e){"use strict";e.r(r),r.default="#version 300 es\r\n\r\nin vec4 vertex;\r\nuniform mat4 u_perspective;\r\nuniform mat4 u_view;\r\nuniform mat4 u_model;\r\n\r\nvoid main() {\r\n    gl_Position = u_perspective * u_view * u_model * vertex;\r\n}"},function(t,r,e){"use strict";e.r(r),r.default="#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform vec4 u_color;\r\nout vec4 outColor;\r\n\r\nvoid main(){\r\n    outColor = u_color;\r\n}"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,