!function(t){var r={};function e(n){if(r[n])return r[n].exports;var i=r[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=r,e.d=function(t,r,n){e.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:n})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,r){if(1&r&&(t=e(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var i in t)e.d(n,i,function(r){return t[r]}.bind(null,i));return n},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},e.p="",e(e.s=2)}([function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=e(5),i=function(){function t(t){this.arr=new Float32Array(16),this.arr[0]=t[0],this.arr[4]=t[1],this.arr[8]=t[2],this.arr[12]=t[3],this.arr[1]=t[4],this.arr[5]=t[5],this.arr[9]=t[6],this.arr[13]=t[7],this.arr[2]=t[8],this.arr[6]=t[9],this.arr[10]=t[10],this.arr[14]=t[11],this.arr[3]=t[12],this.arr[7]=t[13],this.arr[11]=t[14],this.arr[15]=t[15]}return t.prototype.get=function(t){return this.arr[t]},t.prototype.getXY=function(t,r){return this.arr[4*t+r]},t.prototype.getBuffer=function(){return this.arr},t.prototype.set=function(t,r){this.arr[t]=r},t.prototype.setXY=function(t,r,e){this.arr[4*t+r]=e},t.prototype.add=function(t){for(var r=0;r<16;r++)this.set(r,this.get(r)+t.get(r));return this},t.prototype.multiply=function(t){return this},t.prototype.multiplyScalar=function(t){for(var r=0;r<16;r++)this.set(r,this.get(r)*t)},t.prototype.multiplyVector=function(t){for(var r=new n.Vector4(0,0,0,1),e=0;e<3;e++)r.setX(r.getX()+this.getXY(e,0)*t.get(e)),r.setY(r.getY()+this.getXY(e,1)*t.get(e)),r.setZ(r.getZ()+this.getXY(e,2)*t.get(e));return r},t.prototype.transpose=function(){var t=this.get(1);this.set(1,this.get(4)),this.set(4,t),t=this.get(2),this.set(2,this.get(8)),this.set(8,t),t=this.get(3),this.set(3,this.get(12)),this.set(12,t),t=this.get(6),this.set(6,this.get(9)),this.set(9,t),t=this.get(7),this.set(7,this.get(13)),this.set(13,t),t=this.get(11),this.set(11,this.get(14)),this.set(14,t)},t.identity=function(){return new t([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])},t.prototype.print=function(){console.log(this.arr[0]+" "+this.arr[4]+" "+this.arr[8]+" "+this.arr[12]),console.log(this.arr[1]+" "+this.arr[5]+" "+this.arr[9]+" "+this.arr[13]),console.log(this.arr[2]+" "+this.arr[6]+" "+this.arr[10]+" "+this.arr[14]),console.log(this.arr[3]+" "+this.arr[7]+" "+this.arr[11]+" "+this.arr[15])},t}();r.Matrix4=i},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=function(){function t(){this.arr=new Array(0)}return t.prototype.push=function(t){this.contains(t.getId())||(this.arr=this.arr.concat([t]))},t.prototype.popByIdentifier=function(t){for(var r=0,e=this.arr.length;r<e;r++){var n=this.arr[r];if(0===n.getId().localeCompare(t))return this.removeByIndex(r),n}},t.prototype.popByIndex=function(t){if(t>=this.arr.length)return null;var r=this.arr[t];return this.removeByIndex(t),r},t.prototype.getByIdentifier=function(t){for(var r=0,e=this.arr.length;r<e;r++){var n=this.arr[r];if(0===n.getId().localeCompare(t))return n}return null},t.prototype.getByIndex=function(t){if(!(t>=this.arr.length))return this.arr[t]},t.prototype.removeByIdentifier=function(t){for(var r=0,e=this.arr.length;r<e;r++){if(0===this.arr[r].getId().localeCompare(t))return void this.arr.splice(r,1)}},t.prototype.removeByIndex=function(t){t>=this.arr.length||this.arr.splice(t,1)},t.prototype.length=function(){return this.arr.length},t.prototype.forEach=function(t){for(var r=0,e=this.arr.length;r<e;r++)t(this.arr[r],r)},t.prototype.contains=function(t){for(var r=0,e=this.arr.length;r<e;r++){if(0===this.arr[r].getId().localeCompare(t))return!0}return!1},t}();r.List=n},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=e(3),i=e(4),o=e(6),s=e(7),a=e(9),u=e(10),c=e(11).default,f=e(12).default,h=document.getElementById("canvas").getContext("webgl2"),p=n.GLHelper.createShader(h,h.VERTEX_SHADER,c),l=n.GLHelper.createShader(h,h.FRAGMENT_SHADER,f),g=n.GLHelper.createProgram(h,p,l),d=a.Geometry.fromDesc(o.GeometryFactory.Cube()),y=new s.Object3D(d);y.setShaders(p,l),y.setProgram(g);var m=i.GLMatrix.Perspective(45*Math.PI/180,h.canvas.clientWidth/h.canvas.clientHeight,.1,500),v=new u.Scene(h);v.setMatrix(m),v.addObject(y),requestAnimationFrame(function t(){v.draw(),requestAnimationFrame(t)})},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=function(){function t(){}return t.createShader=function(t,r,e){var n=t.createShader(r);if(t.shaderSource(n,e),t.compileShader(n),t.getShaderParameter(n,t.COMPILE_STATUS))return n;console.log(t.getShaderInfoLog(n)),t.deleteShader(n)},t.createProgram=function(t,r,e){var n=t.createProgram();if(t.attachShader(n,r),t.attachShader(n,e),t.linkProgram(n),t.getProgramParameter(n,t.LINK_STATUS))return n;console.log(t.getProgramInfoLog(n)),t.deleteProgram(n)},t}();r.GLHelper=n},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=e(0),i=function(){function t(){}return t.Perspective=function(t,r,e,i){var o=e,s=i,a=o*Math.tan(Math.PI/180*.5*t),u=2*a,c=r*u,f=-.5*c,h=f+c,p=a-u,l=[2*o/(h-f),0,0,0,0,2*o/(a-p),0,0,(h+f)/(h-f),(a+p)/(a-p),-(s+o)/(s-o),-1,0,0,-2*s*o/(s-o),0];return new n.Matrix4(l)},t.Camera=function(){},t}();r.GLMatrix=i},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=function(){function t(t,r,e,n){this.NUM_OF_ELEMENTS=4,this.arr=new Float32Array(4),this.arr[0]=t,this.arr[1]=r,this.arr[2]=e,this.arr[3]=n}return t.prototype.getX=function(){return this.arr[0]},t.prototype.getY=function(){return this.arr[1]},t.prototype.getZ=function(){return this.arr[2]},t.prototype.getW=function(){return this.arr[3]},t.prototype.get=function(t){return this.arr[t]},t.prototype.getBuffer=function(){return this.arr},t.prototype.setX=function(t){this.arr[0]=t},t.prototype.setY=function(t){this.arr[1]=t},t.prototype.setZ=function(t){this.arr[2]=t},t.prototype.setW=function(t){this.arr[3]=t},t.prototype.toArray=function(){return[this.arr[0],this.arr[1],this.arr[2],this.arr[3]]},t.prototype.add=function(t){this.arr[0]+=t.getX(),this.arr[1]+=t.getY(),this.arr[2]+=t.getZ()},t.prototype.multiplyScalar=function(t){this.arr[0]*=t,this.arr[1]*=t,this.arr[2]*=t},t.prototype.normalize=function(){for(var t=0,r=0;r<3;r++)t+=Math.pow(this.get(r),2);t=Math.sqrt(t),this.multiplyScalar(1/t)},t}();r.Vector4=n},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=function(){function t(){}return t.Plane=function(){return{vertices:new Float32Array([-.5,-.5,.5,1,.5,-.5,.5,1,.5,.5,.5,1,-.5,.5,.5,1]),normales:new Float32Array([0,0,-1,1,0,0,-1,1,0,0,-1,1,0,0,-1,1]),indices:new Uint16Array([0,1,2,0,2,3])}},t.Cube=function(){return{vertices:new Float32Array([-.5,-.5,.5,1,.5,-.5,.5,1,.5,.5,.5,1,-.5,.5,.5,1,-.5,-.5,-.5,1,-.5,.5,-.5,1,.5,.5,-.5,1,.5,-.5,-.5,1,-.5,.5,-.5,1,-.5,.5,.5,1,.5,.5,.5,1,.5,.5,-.5,1,-.5,-.5,-.5,1,.5,-.5,-.5,1,.5,-.5,.5,1,-.5,-.5,.5,1,.5,-.5,-.5,1,.5,.5,-.5,1,.5,.5,.5,1,.5,-.5,.5,1,-.5,-.5,-.5,1,-.5,-.5,.5,1,-.5,.5,.5,1,-.5,.5,-.5,1]),normales:new Float32Array([0,0,-1,1,0,0,-1,1,0,0,-1,1,0,0,-1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,-1,0,0,1,-1,0,0,1,-1,0,0,1,-1,0,0,1]),indices:new Uint16Array([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23])}},t}();r.GeometryFactory=n},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=e(0),i=e(8),o=e(1),s=function(){function t(t){this.id=i.UUID.create(),this.geometry=t,this.matrix=n.Matrix4.identity(),this.children=new o.List,this.parent=null,this.vertexShader=null,this.fragmentShader=null,this.program=null,this.attributeLocations=new Array,this.uniformLocations=new Array}return t.prototype.getId=function(){return this.id},t.prototype.getGeometry=function(){return this.geometry},t.prototype.setGeometry=function(t){this.geometry=t},t.prototype.getMatrix=function(){return this.matrix},t.prototype.setMatrix=function(t){this.matrix=t},t.prototype.getParent=function(){return this.parent},t.prototype.setParent=function(t){this.parent=t},t.prototype.getChildren=function(){return this.children},t.prototype.addChild=function(t){this.children.push(t)},t.prototype.removeChild=function(t){this.children.removeByIdentifier(t)},t.prototype.getShaders=function(){return{vertexShader:this.vertexShader,fragmentShader:this.fragmentShader}},t.prototype.setShaders=function(t,r){this.vertexShader=t,this.fragmentShader=r},t.prototype.getProgram=function(){return this.program},t.prototype.setProgram=function(t){this.program=t},t.prototype.getAttributeLocations=function(){return this.attributeLocations},t.prototype.getUniformLocations=function(){return this.uniformLocations},t.prototype.setup=function(t){this.attributeLocations.push(t.getAttribLocation(this.program,"vertex")),this.uniformLocations.push(t.getUniformLocation(this.program,"u_perspective")),this.uniformLocations.push(t.getUniformLocation(this.program,"u_modelview")),this.uniformLocations.push(t.getUniformLocation(this.program,"u_color")),this.geometry.createBuffers(t),this.children.forEach(function(r,e){r.setup(t)})},t}();r.Object3D=s},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=function(){function t(){}return t.create=function(){function t(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return t()+t()+"-"+t()+"-"+t()+"-"+t()+"-"+t()+t()+t()},t}();r.UUID=n},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=function(){function t(){this.vertices=new Float32Array(0),this.colors=new Uint8Array(0),this.normales=new Float32Array(0),this.indices=new Uint16Array(0),this.buffers={vertexBuffer:null,colorBuffer:null,indexBuffer:null},this.buffersCreated=!1,this.elementCount=0}return t.prototype.getVertices=function(){return this.vertices},t.prototype.getNormales=function(){return this.normales},t.prototype.getIndices=function(){return this.indices},t.prototype.getBuffers=function(){return this.buffers},t.prototype.setVertices=function(t){this.vertices=t},t.prototype.setNormales=function(t){this.normales=t},t.prototype.setIndices=function(t){this.indices=t},t.prototype.setBuffers=function(t){this.buffers=t},t.prototype.getElementCount=function(){return this.elementCount},t.prototype.createBuffers=function(t){this.buffersCreated||(0!==this.vertices.length&&(this.buffers.vertexBuffer=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,this.buffers.vertexBuffer),t.bufferData(t.ARRAY_BUFFER,this.vertices,t.STATIC_DRAW),this.elementCount=this.vertices.length),0!==this.indices.length&&(this.buffers.indexBuffer=t.createBuffer(),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.buffers.indexBuffer),t.bufferData(t.ELEMENT_ARRAY_BUFFER,this.indices,t.STATIC_DRAW),this.elementCount=this.indices.length),this.buffersCreated=!0)},t.fromDesc=function(r){var e=new t;return e.setVertices(r.vertices),e.setNormales(r.normales),r.indices&&e.setIndices(r.indices),e},t}();r.Geometry=n},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=e(1),i=e(0),o=function(){function t(t){this.gl=t,this.objects=new n.List,this.matrix=i.Matrix4.identity()}return t.prototype.getMatrix=function(){return this.matrix},t.prototype.setMatrix=function(t){this.matrix=t},t.prototype.getObjects=function(){return this.objects},t.prototype.getObject=function(t){return this.objects.getByIdentifier(t)},t.prototype.addObject=function(t){this.objects.push(t)},t.prototype.draw=function(){var t=this;this.objects.forEach(function(r,e){var n=t.gl,i=r.getGeometry();i.createBuffers(n);var o=i.getBuffers(),s=i.getElementCount(),a=r.getAttributeLocations(),u=r.getUniformLocations();n.useProgram(r.getProgram()),n.bindBuffer(n.ARRAY_BUFFER,o.vertexBuffer),n.vertexAttribPointer(a[0],4,n.FLOAT,!1,0,0),n.enableVertexAttribArray(a[0]),n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,o.indexBuffer),n.uniformMatrix4fv(u[0],!1,t.getMatrix().getBuffer()),n.uniformMatrix4fv(u[1],!1,r.getMatrix().getBuffer()),n.uniform4fv(u[2],new Float32Array([1,0,0,1])),n.drawElements(n.TRIANGLES,s,n.UNSIGNED_SHORT,0)})},t}();r.Scene=o},function(t,r,e){"use strict";e.r(r),r.default="#version 300 es\r\n\r\nin vec4 vertex;\r\nuniform mat4 u_perspective;\r\nuniform mat4 u_modelview;\r\n\r\nvoid main() {\r\n    gl_Position = u_perspective * u_modelview * vertex;\r\n}"},function(t,r,e){"use strict";e.r(r),r.default="#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform vec4 u_color;\r\nout vec4 outColor;\r\n\r\nvoid main(){\r\n    outColor = u_color;\r\n}"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,